-- Subscriptions Tables

CREATE TABLE subscription_types
(
    id           INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name         VARCHAR(32) UNIQUE NOT NULL,
    display_name VARCHAR(32)        NOT NULL,

    created_at   TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE subscription_plans
(
    id                   SERIAL PRIMARY KEY,
    subscription_type_id INT           NOT NULL,
    name                 VARCHAR(16)   NOT NULL,
    display_name         VARCHAR(32)   NOT NULL,
    duration_days        INT           NOT NULL,
    price                INT           NOT NULL,
    discount_multiplier  DECIMAL(4, 3) NOT NULL DEFAULT 1,
    created_at           TIMESTAMPTZ            DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMPTZ            DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (subscription_type_id) REFERENCES subscription_types (id)
);

CREATE INDEX idx_subscription_plans_type_id ON subscription_plans (subscription_type_id);

-- End Subscriptions Tables


-- Users tables
CREATE TABLE users
(
    id                INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    trading_view_name VARCHAR(32) UNIQUE NOT NULL,
    email             VARCHAR(64) UNIQUE NOT NULL,
    role              VARCHAR(16)        NOT NULL,
    password          VARCHAR(64)        NOT NULL,
    telegram_id       CHAR(10) UNIQUE,
    created_at        timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at        timestamptz DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_profile
(
    user_id      INT PRIMARY KEY,
    country_code CHAR(2),
    discord_id   VARCHAR(32) UNIQUE,
    created_at   timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at   timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE users_subscriptions
(
    id                    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id               INT         NOT NULL,
    plan_id               INT         NOT NULL,
    price                 INT         NOT NULL,
    payment_method        VARCHAR(16),
    status                VARCHAR(16) NOT NULL,
    is_trial              BOOLEAN     NOT NULL DEFAULT FALSE,
    payment_provider_data jsonb,
    expired_at            timestamptz NOT NULL,
    created_at            timestamptz          DEFAULT CURRENT_TIMESTAMP,
    updated_at            timestamptz          DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (plan_id) REFERENCES subscription_plans
);

CREATE INDEX idx_users_subscriptions_user_plan ON users_subscriptions (user_id, plan_id);

CREATE TABLE user_partnership
(
    user_id        INT PRIMARY KEY,
    terms_accepted BOOLEAN  NOT NULL DEFAULT FALSE,
    level_rank     SMALLINT NOT NULL,
    created_at     timestamptz       DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamptz       DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE user_finance
(
    user_id    INT PRIMARY KEY,
    balance    INT NOT NULL DEFAULT 0,
    created_at timestamptz  DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz  DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

ALTER TABLE user_finance
    ADD CONSTRAINT positive_balance CHECK (balance >= 0);

CREATE TABLE users_transactions
(
    id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id          INT,
    amount           INT         NOT NULL,
    transaction_type VARCHAR(16) NOT NULL,
    created_at       timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at       timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

-- End Users Tables

CREATE TABLE referrals
(
    id            INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    referrer_id   INT     NOT NULL,
    referred_id   INT     NOT NULL UNIQUE,
    is_active     BOOLEAN NOT NULL DEFAULT FALSE,
    is_bonus_used BOOLEAN NOT NULL DEFAULT FALSE,
    created_at    timestamptz      DEFAULT CURRENT_TIMESTAMP,
    updated_at    timestamptz      DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (referrer_id) REFERENCES users (id),
    FOREIGN KEY (referred_id) REFERENCES users (id)
);

CREATE TABLE referrals_earnings
(
    id             INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    referral_id    INT NOT NULL,
    transaction_id INT NOT NULL,
    cashback_level     INT NOT NULL,
    amount         INT NOT NULL,
    created_at     TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (referral_id) REFERENCES referrals (id),
    FOREIGN KEY (transaction_id) REFERENCES users_transactions (id)
);


CREATE TABLE codes
(
    id             INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    code           VARCHAR(32) UNIQUE NOT NULL,
    owner_id       INT UNIQUE,
    discount_value DECIMAL(10, 2)     NOT NULL,
    discount_type  VARCHAR(16)        NOT NULL,
    valid_until    timestamptz,
    max_uses       INT,
    used_count     INT                NOT NULL DEFAULT 0,
    created_at     timestamptz                 DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamptz                 DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (owner_id) REFERENCES users (id)
);

CREATE TABLE codes_usages
(
    id         INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id    INT NOT NULL,
    code_id    INT NOT NULL,
    created_at timestamptz DEFAULT CURRENT_TIMESTAMP,

    UNIQUE (user_id, code_id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (code_id) REFERENCES codes (id)
);

CREATE TABLE orders
(
    id             INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id        INT         NOT NULL,
    code_id        INT,
    payment_method VARCHAR(16) NOT NULL,
    original_price INT         NOT NULL,
    total_price    INT         NOT NULL,
    plan_id        INT         NOT NULL,
    status         VARCHAR(16) NOT NULL,
    created_at     timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (code_id) REFERENCES codes (id),
    FOREIGN KEY (plan_id) REFERENCES subscription_plans (id)
);

CREATE TABLE alerts
(
    id          INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    created_at  timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at  timestamptz DEFAULT CURRENT_TIMESTAMP,
    type        VARCHAR(16) NOT NULL,
    broker      VARCHAR(16) NOT NULL,
    tf          VARCHAR(4)  NOT NULL,
    event       VARCHAR(32) NOT NULL,
    asset       VARCHAR(16) NOT NULL,
    indicator   VARCHAR(32) NOT NULL,
    multi_alert BOOLEAN     NOT NULL,

    UNIQUE (asset, event, type, broker, tf, indicator, multi_alert)
);

CREATE TABLE users_alerts
(
    id         INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    created_at timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz DEFAULT CURRENT_TIMESTAMP,
    user_id    INT NOT NULL,
    alert_id   INT NOT NULL,
    properties jsonb,

    UNIQUE (user_id, alert_id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (alert_id) REFERENCES alerts (id)
);

CREATE TABLE news
(
    id         INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    created_at timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz DEFAULT CURRENT_TIMESTAMP,
    title      VARCHAR(64) NOT NULL,
    content    TEXT        NOT NULL
)

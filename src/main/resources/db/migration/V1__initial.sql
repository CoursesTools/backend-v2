CREATE TABLE users
(
    id                INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    trading_view_name VARCHAR(32) UNIQUE NOT NULL,
    email             VARCHAR(64) UNIQUE NOT NULL,
    role              VARCHAR(16)        NOT NULL,
    password          VARCHAR(64)        NOT NULL,
    is_active         BOOLEAN            NOT NULL DEFAULT FALSE,
    is_trial_used     BOOLEAN            NOT NULL DEFAULT FALSE,
    referrer_id       INT,
    active_updated_at timestamptz,
    created_at        timestamptz                 DEFAULT CURRENT_TIMESTAMP,
    updated_at        timestamptz                 DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (referrer_id) REFERENCES users (id)
);

CREATE TABLE user_profile
(
    user_id      INT PRIMARY KEY,
    country_code char(2),
    created_at   timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at   timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE user_subscription
(
    user_id               INT PRIMARY KEY,
    plan                  varchar(16) NOT NULL,
    subscription_price    int         NOT NULL,
    payment_method        varchar(16),
    status                varchar(16) NOT NULL,
    expired_at            timestamptz NOT NULL,
    payment_provider_data jsonb,
    is_trial              boolean     NOT NULL DEFAULT FALSE,
    created_at            timestamptz          DEFAULT CURRENT_TIMESTAMP,
    updated_at            timestamptz          DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE user_partnership
(
    user_id        INT PRIMARY KEY,
    terms_accepted boolean  NOT NULL DEFAULT FALSE,
    level_rank     smallint NOT NULL,
    created_at     timestamptz       DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamptz       DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE user_finance
(
    user_id INT PRIMARY KEY,
    balance DECIMAL NOT NULL DEFAULT 0,
    earn    DECIMAL NOT NULL DEFAULT 0,
    created_at     timestamptz       DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamptz       DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id)

);


CREATE TABLE promo_codes
(
    id                INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    code              varchar(32) UNIQUE NOT NULL,
    month_discount    int                NOT NULL,
    year_discount     int                NOT NULL,
    lifetime_discount int                NOT NULL,
    owner_id          int UNIQUE,
    created_at        timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at        timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (owner_id) REFERENCES users (id)
);

CREATE TABLE users_promo_codes
(
    id            INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id       INT NOT NULL,
    promo_code_id int NOT NULL,
    created_at    timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (promo_code_id) REFERENCES promo_codes (id)
);

CREATE TABLE users_transactions
(
    id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at       timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at       timestamptz DEFAULT CURRENT_TIMESTAMP,
    user_id          INTEGER,
    amount           DECIMAL     NOT NULL,
    transaction_type VARCHAR(16) NOT NULL,

    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE orders
(
    id             INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id        INT         NOT NULL,
    promo_code     int,
    payment_method varchar(16) NOT NULL,
    original_price int         NOT NULL,
    total_price    int         NOT NULL,
    plan           varchar(16) NOT NULL,
    status         varchar(16) NOT NULL,
    created_at     timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at     timestamptz DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (promo_code) REFERENCES promo_codes (id)
);


CREATE UNIQUE INDEX idx_uq_userId_promoCodeId
    ON users_promo_codes (user_id, promo_code_id);